#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author: szkm330
# @Date:   2021-02-18 16:25:32
import re

'''
压制乱码解决方法：
1.运行lrc_to_ass.py
2.记事本另存output.ass为ANSI
3.aegisub另存一次ass
'''

def filter_emoji(desstr,restr=''):
    co = re.compile("["
    u"\U0001F600-\U0001F64F"
    u"\U0001F300-\U0001F5FF"
    u"\U0001F680-\U0001F6FF"
    u"\U0001F1E0-\U0001F1FF"
    u"\U00002500-\U00002BEF"
    u"\U00002702-\U000027B0"
    u"\U00002702-\U000027B0"
    # u"\U000024C2-\U0001F251" # 日本語
    u"\U0001f926-\U0001f937"
    u"\U00010000-\U0010ffff"
    u"\u2640-\u2642"
    u"\u2600-\u2B55"
    u"\u200d"
    u"\u23cf"
    u"\u23e9"
    u"\u231a"
    u"\ufe0f"  # dingbats
    u"\u3030"
                "]+", re.UNICODE)
    return co.sub(restr, desstr)

# 设置弹幕区，根据直播画面分辨率进行设置
right = '1280'  
left = '405' #405, -1345
# 弹幕停留时间
dtime = 8 #8, 21
# 弹幕高度池，此为30字号的默认设置
#high = [65,95,125,155,185,215,245,275,305,335]
# 弹幕高度池，此为45字号的默认设置
high = [65, 110, 155, 200, 245, 290, 335, 380, 425, 470]
n = 0

input_file_name = "input.lrc"
output_file_name = "output.ass"

# ass文件头
info = """
[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1280
PlayResY: 720

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,LXGW WenKai,45,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,2,0,1,10,10,10,1
Style: TALK,LXGW WenKai,50,&H00FFFFFF,&H000000FF,&H004B164D,&H00000000,-1,0,0,0,100,100,0,0,1,2,0,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
"""


print('{}{}'.format("input: ",input_file_name))
print('{}{}'.format("output: ",output_file_name))

# 写入ass文件头
ass = open(output_file_name,"w",encoding = "utf-8")
ass.write(info)
ass.close()

# lrc转换ass
lrc = open(input_file_name,"r",encoding = "utf-8")
ass = open(output_file_name,"a",encoding = "utf-8")

counter_r=0

for line in lrc:
    counter_r=counter_r+1
    # 若有人发了换行弹幕，退出手动处理
    if not( re.match("^\[[0-9:\.\s]+\].+",line)) :
        print('请处理第{}行内容\n'.format(counter_r))
        continue

    time_str = line.split(']')[0][1:]
    time_str = time_str.split(':')
    time = [0,0,0]
    if len(time_str)>2 :
        time[0] = int(time_str[0])
        time[1] = int(time_str[1])       
        time[2] = float(time_str[2])
    elif len(time_str)==2 :
        time[1] = int(time_str[0])
        time[2] = float(time_str[1]) 
    else :
        continue
             
    # 获取弹幕内容，不显示用户ID
    comment = line.split(']',1)[1].split('\t',1)[1].strip()

    # 获取起始时间
    time0 = '{}:{}:{}'.format(time[0],time[1],time[2])
    # 时间进位计算
    time[2] = time[2] + dtime
    if time[2] < 10:
        time[2] = '0' + str(time[2])
    elif time[2] >= 60:
        time[2] = round((time[2]-60),2)
        if time[2] < 10:
            time[2] = '0' + str(time[2])
        else:
            time[2] = str(time[2])
        time[1] = time[1] + 1
    if time[1] < 10:
        time[1] = '0' + str(time[1])
    elif time[1] >= 60:
        time[1] = time[1] - 60
        time[0] = time[0] + 1
        if time[1] < 10:
            time[1] = '0' + str(time[1])
        else:
            time[1] = str(time[1])
    # 获取结束时间
    time1 = '{}:{}:{}'.format(time[0],time[1],time[2])
    # 按顺序轮流设置高度
    pos = high[n]
    n = n + 1
    if n >= 10:
        n = 0

    # 得到最终语句,为了不挡画面,直接在画面边缘消失
    end1 = 'Dialogue: 0,{},{},Default,,0,0,0,,{{\move({},{},{},{})}}{}'.format(
           time0,time1,right,pos,left,pos,comment)
    #format(time0,time1,right,pos,left*len(comment),pos,comment)
    #end2 = filter_emoji(end1)
    ass.write('{}\n'.format(end1))

# 结束
lrc.close()
ass.close()
